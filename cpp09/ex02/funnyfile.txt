/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dcastagn <dcastagn@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/22 11:21:34 by dcastagn          #+#    #+#             */
/*   Updated: 2023/11/22 14:37:56 by dcastagn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <vector>
#include <stdlib.h>
#ifndef COLORS
# define GREEN "\033[1;32m"
# define RED "\033[1;31m"
# define CYAN "\033[1;36m"
# define YELLOW "\033[1;33m"
# define BLUE "\033[1;34m"
# define PURPLE "\033[1;35m"
# define WHITE "\033[1;37m"
# define GRAY "\033[1;30m"
# define RESET "\033[0m"
#endif

void mergeInsertion(std::vector<int>& arr, int left, int right) {
    if (left < right - 1) {
        int mid = (left + right) / 2;

        // Make pairwise comparisons
        for (int i = left; i < mid; i++) {
            if (arr[i] > arr[i + mid]) {
                std::swap(arr[i], arr[i + mid]);
            }
        }

        // Sort the larger numbers using merge insertion
        mergeInsertion(arr, mid, right);
    }
}

void binaryInsertion(std::vector<int>& arr, int start, int end, int value) {
    int left = start;
    int right = end;

    while (left <= right) {
        int mid = (left + right) / 2;
        if (arr[mid] < value) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    for (int i = end; i >= left; i--) {
        arr[i + 1] = arr[i];
    }

    arr[left] = value;
}

void fordJohnsonMergeInsertionSort(std::vector<int>& arr) {
    int n = arr.size();

    // Make pairwise comparisons
    for (int i = 0; i < n / 2; i++) {
        if (arr[i] > arr[i + n / 2]) {
            std::swap(arr[i], arr[i + n / 2]);
        }
    }

    // Sort the larger numbers using merge insertion
    mergeInsertion(arr, 0, n / 2);

    // Insert the remaining elements using binary insertion
    for (int j = n / 2 + 1; j < n; j++) {
        binaryInsertion(arr, 0, j - 1, arr[j]);
    }
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " num1 num2 num3 ...";
        return 1;
    }
    std::vector<int> arr;
    for (int i = 1; i < argc; i++) {
        arr.push_back(std::atoi(argv[i]));
    }
    fordJohnsonMergeInsertionSort(arr);
    for (int i = 0; i < static_cast<int>(arr.size()); i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}
